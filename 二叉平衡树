```c++
#include<stack>
#include<iostream>
using namespace std;

template<class K,class V>
struct AVLNode
{
	AVLNode<K, V> * _pLeft;
	AVLNode<K, V> * _pRight;
	K key;
	V value;
	int bf;

	AVLNode()
		:_pLeft(NULL)
		, _pRight(NULL)
	{}

	AVLNode(const K key, const V value)
		:_pLeft(NULL)
		, _pRight(NULL)
		, key(key)
		, value(value)
		, bf(0)
	{}

};


template<class K,class V>
class AVLTree
{
	//typedef AVLNode<class K, class V> Node;
	//typedef AVLNode<class K, class V> * PNode;

public:
	// 构造函数--无参
	AVLTree()
		:_pRoot(NULL)
	{}

	////构造函函数--含参
	//AVLTree(const K key, const V value)

	//{}

	// 插入函数
	bool Insert(const K key, const V value)
	{
		return _Insert(key, value, _pRoot);
	}

	// 显示函数
	void showTree()
	{
		_showTree(_pRoot);
	}




private:
	AVLNode<K, V> * _pRoot;

	// 插入函数
	bool _Insert(const K key, const V value, AVLNode<K, V> *& ptr)
	{
		AVLNode<K, V> * pCur = ptr;
		AVLNode<K, V> *& pParent = _pRoot; // ???????????????????????????????????????????
		stack<AVLNode<K, V> *> s;
		while (pCur != NULL)
		{
			if (pCur->key == key)
				return false;

			pParent = pCur;
			s.push(pParent);
			if (pCur->key > key)
			{
				pCur = pCur->_pLeft;
			}
			else if (pCur->key < key)
			{
				pCur = pCur->_pRight;
			}
		}
		// 所插位置为NULL 新建结点
		pCur = new AVLNode<K, V>(key, value);
		if (pCur == NULL)
		{
			cerr << "存储空间不足！" << endl;
			exit(1);
		}

		// 判断是否为空树
		if (pParent == NULL)
		{
			ptr = pCur;
			return true;
		}
		if (key < pParent->key)
			pParent->_pLeft = pCur;
		else
			pParent->_pRight = pCur;

		// 调整平衡
		while (s.empty() == false)
		{
			pParent = s.top();
			s.pop();
			if (pCur == pParent->_pLeft)
				pParent->bf--;
			else
				pParent->bf++;

			if (pParent->bf == 0)
				break;
			if (pParent->bf == 1 || pParent->bf == -1)
				pCur = pParent;
			if (pParent->bf == 2 || pParent->bf == -2)
			{
				// 进行调整
				int d;// 调整平衡因子
				d = (pParent->bf < 0) ? -1 : 1;
				if (pCur->bf == d)
				{
					if (d == -1)
						RotateR(pParent); // 右单旋
					else
						RotateL(pParent); // 左单旋
				}
				else
				{
					if (d == -1)
						RotateLR(pParent); // 左右双旋
					else
						RotateRL(pParent); // 右左双旋
				}
				break;
			}
			if (s.empty() == true)
				pCur = pParent;
			else
			{
				AVLNode<K, V> * q;
				q = s.top();
				if (q->key > pParent->key)
					q->_pLeft = pParent;
				else
					q->_pRight = pParent;
			}
		}
		return true;
	}

	// 左单旋
	void RotateL(AVLNode<K, V> *& ptr)
	{
		// 右子树比左子树高
		// 对以ptr为根的AVL树做左单旋转，旋转后新根在ptr
		AVLNode<K, V> * subL = ptr; // 要左旋的结点
		ptr = subL->_pRight;

		subL->_pRight = ptr->_pLeft;
		ptr->_pLeft = subL;
		ptr->bf = subL->bf = 0;
	}

	// 右单旋
	void RotateR(AVLNode<K, V> *& ptr)
	{
		// 左子树比右子树高
		AVLNode<K, V> * subR = ptr; // 要右旋的结点
		ptr = ptr->_pLeft;

		subR->_pLeft = ptr->_pRight;
		ptr->_pRight = subR;
		ptr->bf = subR->bf = 0;
	}

	// 先左再右单旋
	void RotateLR(AVLNode<K, V> *& ptr)
	{
		AVLNode<K, V> * subL = ptr->_pLeft;
		AVLNode<K, V> * subR = ptr;

		ptr = subL->_pRight;
		subL->_pRight = ptr->_pLeft;
		ptr->_pLeft = subL;

		if (ptr->bf < 0)
		{
			subL->bf = 0;
		}
		else
			subL->bf = -1;

		subR->_pLeft = ptr->_pRight;
		ptr->_pRight = subR;

		if (ptr->bf == -1)
			subR->bf = 1;
		else
			subR->bf = 0;

		ptr->bf = 0;
	}

	// 先右后左旋转
	void RotateRL(AVLNode<K, V> *& ptr)
	{
		AVLNode<K, V> * subL = ptr;
		AVLNode<K, V> * subR = ptr->_pRight;
		ptr = ptr->_pLeft;

		subR->_pLeft = ptr->_pRight;
		ptr->_pRight = subR;
		if (ptr->bf >= 0)
			subR->bf = 0;
		else
			subR->bf = 1;

		subL->_pRight = ptr->_pLeft;
		ptr->_pLeft = subL;
		if (ptr->bf == 1)
			subL->bf = -1;
		else
			subL->bf = 0;

		ptr->bf = 0;
	}

	// 显示函数
	void _showTree(AVLNode<K,V> * ptr)
	{
		if (ptr == NULL)
			return;
		_showTree(ptr->_pLeft);
		cout << ptr->key << " ";
		_showTree(ptr->_pRight);
	}

	// 删除结点
	Remove(AVLNode<K, V> *& ptr, K key)
	{
		AVLNode<K, V> * pCur = ptr;
		AVLNode<K, V> * pParent = ptr;

		stack<AVLNode<K, V> *> s;
		// 找到需要被删除的结点，将路径上的结点记录在栈中
		while (pCur != NULL)
		{
			if (key == pCur->key)
				break;
			pParent = pCur;
			s.push(pParent);
			if (key > pCur->key)
				pCur = pCur->_pRight;
			else
				pCur = pCur->_pLeft;

		}



	}

};


int main()
{
	AVLTree<int, int> t;
	t.Insert(1, 11);
	t.Insert(2, 12);
	t.Insert(3, 13);
	t.Insert(3, 13);
	t.Insert(4, 14);
	t.showTree();
	return 0;
}

```
